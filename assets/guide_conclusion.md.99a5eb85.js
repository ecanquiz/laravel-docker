import{_ as e,c as a,o,N as s}from"./chunks/framework.f52e5230.js";const t="/laravel-docker/assets/laravel2.f5a4df95.png",g=JSON.parse('{"title":"Conclusión","description":"","frontmatter":{},"headers":[],"relativePath":"guide/conclusion.md"}'),n={name:"guide/conclusion.md"},c=s('<h1 id="conclusion" tabindex="-1">Conclusión <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusión&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Valdrá la pena detallar las versiones utilizadas y mantenerlas exactamente igual para todos los ambientes (desarrollo, prueba y producción). De este modo se asegura que el código fuente sea compatible en cada uno de ellos.</p></div><p>Sin duda, el tema de la contenerización es muy extenso y solo hemos cubierto una pequeña parte, pero hemos cubierto la base necesaria para empezar.</p><blockquote><p>Estaremos encantados si este artículo se convierte en un punto de partida para el desarrollo <em><strong>BackEnd</strong></em> (con Laravel) en <em><strong>Docker</strong></em>.</p></blockquote><p><img src="'+t+'" alt="conclusion"></p>',5),r=[c];function l(i,d,u,p,_,m){return o(),a("div",null,r)}const h=e(n,[["render",l]]);export{g as __pageData,h as default};
